Skizze:

Ford-Fulkerson:
Funktionsweise:

1: Initialisierung
	- An allen Kanten den aktuellen Flow auf 0 setzen
	- Den Start-Knoten markieren
	- Für den Start-Knoten das Delta "Unendlich" eintragen
	
2: Algorithmus
BEGIN step2
	WHILE (noch nicht alle Knoten inspiziert)
		v = (beliebiger Knoten, der noch nicht inspiziert wurde)
		setInspiziert(v)
		listIncidentsFromV = getIncident(v)
	
		FOR (Schleife über alle Kanten)
			IF (kante.source == v) //Vorwärtskante
				target = kante.target
				IF (target noch nicht markiert)
					delta = MIN((edgeCapacity - flow), vNodeDelta)
					IF (delta > 0)
						target markieren
						targetDelta = delta
						
						IF (target == sink)
							goToStep3
						END IF
					END IF
				END IF
			ELSE //Rückwärtskante
				prev = kante.source
				IF (prev noch nicht markiert)
					IF (Flow an der Kante > 0)
						prev markieren
						
						delta = MIN(flow an der Kante, vNodeDelta)
						prevDelta = delta
						prevIsBackEdge = TRUE
					END IF
				END IF	
			END IF 
		END FOR
	END WHILE
	
	goToStep4
END

#########################

BEGIN step3

	delta = sinkDelta
	edge = Kante, mit der die Senke erreicht wurde
	step3Recursiv(edge, delta)

	Markierungen und Flow zurücksetzen
	
	goToStep2
END step3

BEGIN step3Recursiv (edge, delta)
	IF (edge != null)
		IF (Vorwärtskante)
			edgeFlow = edgeFlow + delta
		ELSE
			edgeFlow = edgeFlow - delta
		END
		
		newEdge = die Kante, mit der der Vorgänger erreicht wurde
		step3Recursiv(newEdge, delta)
	END
END step3Recursiv

##########################

BEGIN step4
	Algorithmus ist fertig
END step4


Wie aus dem Skript hervorgeht, arbeitet der Ford-Fulkerson intern mit einer Tiefensuche.
Daraus ergibt sich, dass intern die markierten Kanten in einem LIFO-Speicher (Stack) vorgehalten werden.
Wir haben uns überlegt, dass wir einen Stack einsetzen wollen. Das bedeutet aber, dass wir eine seperate Liste vorhalten müssen mit den Inspizierten Knoten.
So können wir den Stack immer verkleinen. Beim einfügen in die Liste der markierten Knoten müssen wir dann auch noch überprüfen, ob der Knoten schon in der Liste der Inspizierten ist.
Wie man oben in der Funktionsweise des Algorithmus schon erkennen kann, werden wir an einem Knoten speichern, über welche Kante er erreicht wurde.
Dadurch können wir eindeutig feststellen über welche Kante ein Knoten erreicht wurde und wer der Vorgänger ist.


Nachtrag 13.11.2013
Die Implementierung mittels Stack und einer seperaten Liste für die Inspizierten hat wie geplant funktioniert.
-Wichtig: in Step 3 muss auch die Liste der inspizierten Kanten gelöscht werden.-
An unserem Graphen mussten wir keine Änderungen vornehmen um den Algorithmus zu implementieren.





Edmonds Karp:
Funktioniert wie der Ford-Fulkerson, bis auf das intern eine Breitensuche benutzt wird.


Nachtrag 13.11.2013:
Da der Edmonds-Karp sich vom Algorithmus nicht vom Ford-Fulkerson unterscheidet, außer das intern ein FIFO-Speicher benutzt wird,
werden wir erstmal den Code vom Ford-Fulkerson kopieren und den Stack gegen eine Queue austauschen.


Nachtrag 20.11.2013
Ein erster Ansatz um den Edmonds-Karp- und den Ford-Fulkerson-Algorithmus über eine Implementation zu realisieren wäre, dass beim Initialisieren ein globaler Boolean gespeichert wird, welcher Algorithmus benutzt werden soll. (Ob ein Stack oder eine Queue benutzt werden soll.)
Dann müsste man allerdings an jeder Stelle im Code, an der auf den Stack oder die Queue zugegriffen werden soll, ein IF-Else eingebaut werden.
Das finden wir unschön, darum haben wir uns das folgendermaßen überlegt:
Der einzige Unterschied zwischen Queue und Stack ist, dass Queue nach FIFO (first in first out) und Stack nach LIFO (last in first out) arbeitet.
Grundsätzlich bedeutet das, dass beide mit einer Liste arbeiten könnten und jeweils nur das erste oder letzte Element in der Liste zurückgeben wird.
Umsetztunggedanke:
	1. Wir erstellen eine Interface, das List extendet und eine weitere Funktion "get" hinzufügt.
	2. Wir erstellen zwei Implementationen, die das Interface implementieren und "ArrayList" extenden.
		(ArrayList extenden wir damit wir die Grundimplementationen nicht machen müssen, wie z.B. "add", "size", ...)
		
		2.1 Queue-Implementation: Implementiert "get" indem es das erste Element aus der Liste holt und dieses löscht.
		
		2.2 Stack-Implementation: Implementiert "get" indem es das letzte Element aus der Liste holt und dieses löscht.









